[
  {
    "objectID": "Lab_02.html#setting-up-project",
    "href": "Lab_02.html#setting-up-project",
    "title": "Lab 02",
    "section": "Setting up project",
    "text": "Setting up project\nThe first step is to 1) create a new project folder for this weeks computer lab OR use the folder you set up for the week2 Tutorial. If you haven’t already done so move the data file ENVX1002_Data2.xlsx into your project folder."
  },
  {
    "objectID": "Lab_02.html#plotting-the-tutorial-water-quality-data---continued",
    "href": "Lab_02.html#plotting-the-tutorial-water-quality-data---continued",
    "title": "Lab 02",
    "section": "Plotting the tutorial water Quality Data - continued",
    "text": "Plotting the tutorial water Quality Data - continued\nWe will start with further describing the \\text{SO}_4 water quality data\nRemember the most common way to enter data into R is to import it from an external file. Like in the tutorial, in this example we will import the data found in the worksheet called SO4 found in the ENVX1002_Data2.xlsx file that can be downloaded from the Tutorial and Computer Lab Page on Canvas.\nIn R you can import the file as a data frame using the read_excel function from the readxl package. Note that you need to specify which worksheet you want to import. If you have not installed the readxl package you will need to run install.packages(\"readxl\") but you need to only run this once. Hence, I often suggest to simply type this in the console window bottom left in R Studio and run it from there oryou can put a comment # in front after you have run the code once! Note that there are other commands, such as read.csv and read.table, that can be used to read in various files types!\n\n# install.packages(readxl)\nlibrary(readxl)\nwater&lt;-read_excel(\"ENVX1002_Data2.xlsx\", sheet = \"SO4\")\n\n\nWalk through Exercise - ggplot\nIn this case, the package called ggplot2 to make awesome looking plots, create 1) plot the raw data using a strip chart and 2) a jitter boxplot for the SO4 dataset from the tutorial. For each graphical summary you have used, describe what you see and relate that to the data i.e. is it symmetrical, whatare the range of values and also comment on the advantages and disadvantages of each plot for describing the SO4 dataset?\n\nStrip chart\n\n\n# install.packages(ggplot2)\nlibrary(ggplot2)\np &lt;- ggplot(water, aes(y=SO4, x=\"\")) +\n  geom_jitter(position=position_jitter(0))\np\n\n\n\n\n\n\n\n\n\nBoxplot with jittered points - the following is how to create a boxplot with the data points jittered\n\n\np &lt;- ggplot(water, aes(y=SO4, x=\"\")) +\n  geom_boxplot() + \n  geom_jitter(position=position_jitter(0.1))\np\n\n\n\n\n\n\n\n\nCheck out the cheat sheets here https://www.rstudio.com/resources/cheatsheets/ for more on making plots as well as manipulating data in R!\n\n\nWalk through Exercise - skewness\nIn this case, the package called moments contains a function for calculating skew, called skewness. The skewness (g_1) of a dataset gives an indication of its symmetry. The sign of the skewness tells us whether the data is positively or negatively skewed. It is useful as one source of evidence for determining whether the data has a symmetrical distribution, particularly when having to assess this for many variables at once. First we must install the package using the install.packages function and the load it using the library function. Note that I have put a comment # in front as I have already installed the package and you only need to install a package once!\n\n#install.packages(\"moments\")\nlibrary(moments)\n\nNow we can calculate the skewness of sulphate.\n\nskewness(water$SO4)\n\n[1] 0.1571807"
  },
  {
    "objectID": "Lab_02.html#now-its-your-turn-describing-a-soil-dataset",
    "href": "Lab_02.html#now-its-your-turn-describing-a-soil-dataset",
    "title": "Lab 02",
    "section": "Now it’s your turn Describing a soil dataset",
    "text": "Now it’s your turn Describing a soil dataset\nGiven a dataset we need statistics and graphics to summarise it’s key features. The statistics and graphics we use depend on the type data, i.e. numerical or categorical. The example dataset we will use is from the catchment of Muttama creek which is located near Canberra. Further details about the catchment are given in Orton et al. (2016). 56 sites were sampled for soil to a depth varying between 1 and 2 m and various soil and site properties were measured.\nReference: Orton TG, Pringle MJ & Bishop, TFA (2016). A one-step approach for modelling and mapping soil properties based on profile data sampled over varying depth intervals. Geoderma 262: 174-186.\nIn this work we will focus on describing a subset of soil properties:\n\nclay0 which is the clay (%) for the 0-30cm depth layer;\nclay60 which is the clay (%) for the 60-90cm depth layer;\nec0 which is the electrical conductivity (EC) (\\muS/cm) for the 0-30cm depth layer;\nec60 which is the electrical conductivity (EC) (\\muS/cm) for the 60-90cm depth layer.\n\nThe clay content of a soil determines the nutrients and water it can hold, while EC is a measure of the salt in the soil which if too high limits plant growth. We wish to describe these data in terms of:\n\ntypical values, their variability and identify unusual observations;\ndifferences between different depths;\ndifferences between the 2 soil properties; clay and EC.\n\nWe are also interested in describing the dataset in terms of the lithology and land use found at each of the sites.\nThe data is in the worksheet called soil found in the ENVX1002_Data2.xlsx file that can be found in the Tutorial and Computer lab page in Canvas. Download the file and save into your data folder in your project folder and then load the dataset into R. Remember you need to have installed and loaded the readxl package to do this which we did earlier"
  },
  {
    "objectID": "Lab_02.html#categorical-data",
    "href": "Lab_02.html#categorical-data",
    "title": "Lab 02",
    "section": "Categorical data",
    "text": "Categorical data\nA common way to describe categorical data is to create a frequency table which presents the number of observations belonging to each class.\n\ntable(soil$land_use)\n\n\nCropping  Grazing  Natural \n      12       41        2 \n\n\nFrom this we can see the dominant (most commonly sampled) land use is Grazing.\nA common graphic used to summarise categorical data is a bar plot which can be created with the plot function. Note that we use the as.factor command to make sure r knows to do a bar plot.\n\nplot(as.factor(soil$land_use),xlab=\"Land Use\",ylab=\"Frequency\")\n\n\n\n\n\n\n\n\n\nExercise 1 - Lithology\nWhat is the most commonly sampled lithology?"
  },
  {
    "objectID": "Lab_02.html#numerical-data",
    "href": "Lab_02.html#numerical-data",
    "title": "Lab 02",
    "section": "Numerical data",
    "text": "Numerical data\nIn this case we have 4 properties of interest, clay and EC at 2 different depths. Rather than calculating statistics on each variable separately you can in some cases apply the function to multiple columns in a data frame. In our case the columns of interest are the 2nd to 5th in the soil data frame and we can apply the summary function to all at once.\n\nsummary(soil[,2:5])\n\n     clay0           clay60           ec0              ec60       \n Min.   : 4.52   Min.   :10.38   Min.   : 13.24   Min.   : 15.86  \n 1st Qu.:16.29   1st Qu.:30.95   1st Qu.: 45.72   1st Qu.: 28.66  \n Median :21.78   Median :46.91   Median : 65.96   Median : 39.17  \n Mean   :23.20   Mean   :46.64   Mean   : 70.56   Mean   : 60.51  \n 3rd Qu.:28.46   3rd Qu.:61.46   3rd Qu.: 88.97   3rd Qu.: 59.92  \n Max.   :50.24   Max.   :78.73   Max.   :176.58   Max.   :446.72  \n                 NA's   :1                        NA's   :1       \n\n\n\nExercise 2\nFor each of the clay and EC properties (at all depths), give the most appropriate estimate of centre and variation. Are there any unusual observations? Justify your answers.\n\n\nExercise 3\nIs clay content more variable in the 0-30cm layer or in the 30-60cm layer? For the 0-30cm layer is clay or EC the most variable property. Justify your answers."
  },
  {
    "objectID": "Lab_02.html#comparing-between-groups.",
    "href": "Lab_02.html#comparing-between-groups.",
    "title": "Lab 02",
    "section": "Comparing between groups.",
    "text": "Comparing between groups.\nOf interest to researchers is to assess the differences in a variable between groupings of data, e.g. weight change for different diets. In this analysis we wish to describe the difference in clay and EC between the land use or lithology classes. This will lead to more formal hypothesis testing in the later topics in ENVX1002. See https://en.wikipedia.org/wiki/Lithology for more information on Lithiology.\nThis is where the tapply function is useful. Note we can use the $ followed by the column name to select the column as opposed to\n\ntapply(soil$clay0,soil$land_use,mean)\n\nCropping  Grazing  Natural \n24.46667 22.92976 21.08500 \n\n\nThe general structure of the tapply function is 3 arguments which are described below based on the code above:\n\nthe response variable on which we wish to apply the function, clay 0, soil$clay0;\nthe categorical variable which indicates the groups we wish to separately apply the function to, land use, soil$land_use;\nthe function we are using, mean.\n\nWe can use the tapply function for other statistics, for example the variance of each group is also important.\n\ntapply(soil$clay0,soil$land_use,var)\n\n Cropping   Grazing   Natural \n 64.56181 132.23743   0.96605"
  },
  {
    "objectID": "Lab_02.html#using-dplyr",
    "href": "Lab_02.html#using-dplyr",
    "title": "Lab 02",
    "section": "Using dplyr",
    "text": "Using dplyr\nThis is a little more fancy! We can also use a package called dplyr to apply functions to different groupings of data. See https://rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf for all the operations you can do. Note you will have to install the dplyr package first and then load it into R Studio.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nsoil %&gt;%\ngroup_by(land_use) %&gt;%\n  summarise(mean_clay0 = mean(clay0))\n\n# A tibble: 3 × 2\n  land_use mean_clay0\n  &lt;chr&gt;         &lt;dbl&gt;\n1 Cropping       24.5\n2 Grazing        22.9\n3 Natural        21.1"
  },
  {
    "objectID": "Lab_02.html#boxplot-for-different-groupings",
    "href": "Lab_02.html#boxplot-for-different-groupings",
    "title": "Lab 02",
    "section": "Boxplot for different groupings",
    "text": "Boxplot for different groupings\nWe can also generate graphics for properties for different groupings. In the example below we create boxplots for each land use class. Take note of the general structure of the arguments for the boxplot function in this case as they used for many functions in R.\nFirst we specify the response, clay0, next is the tilde, ~ which means a funcion of, then we have the predictor, land_use, and finally we specify the data.frame with the data= argument. Using the data= argument enables us to specify column names only rather than their location within the data frame, e.g. soil[,2], soil$clay0.\n\nboxplot(clay0~land_use,data=soil)\n\n\n\n\n\n\n\n\nWe can also use a package called ggplot to create awesome looking graphs. See https://ggplot2.tidyverse.org/ for all the graphics you can do. Note you will have to install the ggplot2 package first and then load it into R Studio.\n\nlibrary(ggplot2)\np_spoil &lt;- ggplot(soil, aes(y = clay0, x = land_use, fill = land_use))\n\np_spoil + \n  geom_boxplot() +\n  geom_jitter(width=0.2, height = 0.2, col = \"blue\") +\n  ylab(\"clay 0-30cm (%)\") +\n  xlab(\"Land use class\")\n\n\n\n\n\n\n\n\n\nExercise 4\nUsing an appropriate measure of centre which land use has the largest EC and clay for each depth layer?\n\n\nExercise 5\nCreate boxplots of clay 0-30cm and clay 30-60cm for the different lithological classes. Are there any differences between the lithological classes based on the boxplots.\nThis is the end of the R component of the practical. Remember to save your quarto file so you can access it in the future."
  }
]